{"remainingRequest":"/Users/stoumann/Projects/vue-wizard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stoumann/Projects/vue-wizard/src/lib-components/vue-wizard.vue?vue&type=style&index=0&id=7cb723da&scoped=true&lang=css&","dependencies":[{"path":"/Users/stoumann/Projects/vue-wizard/src/lib-components/vue-wizard.vue","mtime":1593463131773},{"path":"/Users/stoumann/Projects/vue-wizard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stoumann/Projects/vue-wizard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/stoumann/Projects/vue-wizard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/stoumann/Projects/vue-wizard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/stoumann/Projects/vue-wizard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi52dWUtd2l6YXJkIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["vue-wizard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoeA;AACA;AACA;AACA;AACA","file":"vue-wizard.vue","sourceRoot":"src/lib-components","sourcesContent":["<template>\n  <div class=\"vue-wizard\">\n\t<div class=\"wizard-header\" v-if=\"$slots['title']\">\n      <slot name=\"title\">\n        <h4 class=\"wizard-title\">{{title}}</h4>\n        <p class=\"category\">{{subTitle}}</p>\n      </slot>\n    </div>\n    <div class=\"wizard-tabs\" role=\"tablist\">\n      <ul class=\"wizard-tablist\">\n        <slot name=\"tab\" v-for=\"(tab, index) in tabs\" :index=\"index\" :tab=\"tab\">\n          <wizard-tab :tab=\"tab\" :index=\"index\" :step-size=\"stepSize\" @click.native=\"navigateToTab(index)\" @keyup.enter.native=\"navigateToTab(index)\" :transition=\"transition\"></wizard-tab>\n        </slot>\n      </ul>\n    </div>\n    <div class=\"wizard-content\">\n    \t<slot v-bind=\"slotProps\"></slot>\n    </div>\n    <div class=\"wizard-card-footer clearfix\" v-if=\"!hideButtons\">\n      <slot name=\"footer\" v-bind=\"slotProps\">\n        <div class=\"wizard-footer-left\">\n          <span @click=\"prevTab\" @keyup.enter=\"prevTab\" v-if=\"displayPrevButton\" role=\"button\" tabindex=\"0\">\n            <slot name=\"prev\" v-bind=\"slotProps\">\n\t\t\t\tPrev button\n              <!-- <wizard-button :style=\"fillButtonStyle\"\n                             :disabled=\"loading\">\n                {{backButtonText}}\n              </wizard-button> -->\n            </slot>\n          </span>\n          <slot name=\"custom-buttons-left\" v-bind=\"slotProps\"></slot>\n        </div>\n\n        <div class=\"wizard-footer-right\">\n          <slot name=\"custom-buttons-right\" v-bind=\"slotProps\"></slot>\n          <span @click=\"nextTab\" @keyup.enter=\"nextTab\" v-if=\"isLastStep\" role=\"button\" tabindex=\"0\">\n              <slot name=\"finish\" v-bind=\"slotProps\">\n\t\t\t\tFinish button\n               <!-- <wizard-button :style=\"fillButtonStyle\">\n                {{finishButtonText}}\n              </wizard-button> -->\n            </slot>\n          </span>\n          <span @click=\"nextTab\" @keyup.enter=\"nextTab\" role=\"button\" tabindex=\"0\" v-else>\n           <slot name=\"next\" v-bind=\"slotProps\">\n\t\t\t   Next button\n             <!-- <wizard-button :style=\"fillButtonStyle\" :disabled=\"loading\">\n              {{nextButtonText}}\n             </wizard-button> -->\n           </slot>\n         </span>\n        </div>\n\n      </slot>\n    </div>\n  </div>\n</template>\n<script>\n  \timport WizardTab from './wizard-tab.vue';\n  \timport {isPromise, findElementAndFocus, getFocusedTabIndex} from './helperFunctions';\n\n\texport default {\n\t\tname: 'vue-wizard', // vue component name\n\t\tcomponents: {\n\t\t\tWizardTab\n\t\t},\n\t\tprops: {\n\t\t\tid: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'vw_' + (new Date()).valueOf()\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'Gandalf himself'\n\t\t\t},\n\t\t\tsubTitle: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'Radagast is subtitle'\n\t\t\t},\n\t\t\tnextButtonText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'Next'\n\t\t\t},\n\t\t\tbackButtonText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'Back'\n\t\t\t},\n\t\t\tfinishButtonText: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'Finish'\n\t\t\t},\n\t\t\thideButtons: {\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: false\n\t\t\t},\n\t\t\tvalidateOnBack: {\n\t\t\t\ttype: Boolean\n\t\t\t},\n\t\t\tcolor: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: '#e74c3c'\n\t\t\t},\n\t\t\terrorColor: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: '#8b0000'\n\t\t\t},\n\t\t\tshape: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'circle'\n\t\t\t},\n\t\t\tlayout: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'horizontal'\n\t\t\t},\n\t\t\tstepsClasses: {\n\t\t\t\ttype: [String, Array],\n\t\t\t\tdefault: ''\n\t\t\t},\n\t\t\tstepSize: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: 'md',\n\t\t\t\tvalidator: (value) => {\n\t\t\t\t\tlet acceptedValues = ['xs', 'sm', 'md', 'lg'];\n\t\t\t\t\treturn acceptedValues.indexOf(value) !== -1;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttransition: {\n\t\t\t\ttype: String,\n\t\t\t\tdefault: ''\n\t\t\t},\n\t\t\tstartIndex: {\n\t\t\t\ttype: Number,\n\t\t\t\tdefault: 0,\n\t\t\t\tvalidator: (value) => {\n\t\t\t\t\treturn value >= 0;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tprovide () {\n\t\t\treturn {\n\t\t\t\taddTab: this.addTab,\n\t\t\t\tremoveTab: this.removeTab\n\t\t\t}\n\t\t},\n\t\tdata () {\n\t\t\treturn {\n\t\t\t\tactiveTabIndex: 0,\n\t\t\t\tcurrentPercentage: 0,\n\t\t\t\tmaxStep: 0,\n\t\t\t\tloading: false,\n\t\t\t\ttabs: []\n\t\t\t}\n\t\t},\n\t\tcomputed: {\n\t\t\tslotProps () {\n\t\t\t\treturn {\n\t\t\t\t\tnextTab: this.nextTab,\n\t\t\t\t\tprevTab: this.prevTab,\n\t\t\t\t\tactiveTabIndex: this.activeTabIndex,\n\t\t\t\t\tisLastStep: this.isLastStep,\n\t\t\t\t\tfillButtonStyle: this.fillButtonStyle\n\t\t\t\t}\n\t\t\t},\n\t\t\ttabCount () {\n\t\t\t\treturn this.tabs.length\n\t\t\t},\n\t\t\tisLastStep () {\n\t\t\t\treturn this.activeTabIndex === this.tabCount - 1\n\t\t\t},\n\t\t\tisVertical () {\n\t\t\t\treturn this.layout === 'vertical'\n\t\t\t},\n\t\t\tdisplayPrevButton () {\n\t\t\t\treturn this.activeTabIndex !== 0\n\t\t\t},\n\t\t\tstepPercentage () {\n\t\t\t\treturn 1 / (this.tabCount * 2) * 100\n\t\t\t},\n\t\t\tprogressBarStyle () {\n\t\t\t\treturn {\n\t\t\t\t\tbackgroundColor: this.color,\n\t\t\t\t\twidth: `${this.progress}%`,\n\t\t\t\t\tcolor: this.color\n\t\t\t\t}\n\t\t\t},\n\t\t\tfillButtonStyle () {\n\t\t\t\treturn {\n\t\t\t\t\tbackgroundColor: this.color,\n\t\t\t\t\tborderColor: this.color,\n\t\t\t\t\tcolor: 'white'\n\t\t\t\t}\n\t\t\t},\n\t\t\tprogress () {\n\t\t\t\tlet percentage = 0;\n\n\t\t\t\tif (this.activeTabIndex > 0) {\n\t\t\t\t\tlet stepsToAdd = 1;\n\t\t\t\t\tlet stepMultiplier = 2;\n\t\t\t\t\tpercentage = this.stepPercentage * ((this.activeTabIndex * stepMultiplier) + stepsToAdd);\n\t\t\t\t} else {\n\t\t\t\t\tpercentage = this.stepPercentage;\n\t\t\t\t}\n\n\t\t\t\treturn percentage;\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\temitTabChange (prevIndex, nextIndex) {\n\t\t\t\tthis.$emit('on-change', prevIndex, nextIndex);\n\t\t\t\tthis.$emit('update:startIndex', nextIndex);\n\t\t\t},\n\t\t\taddTab (item) {\n\t\t\t\tconst index = this.$slots.default.indexOf(item.$vnode);\n\t\t\t\titem.tabId = `${item.title.replace(/ /g, '')}${index}`;\n\t\t\t\tthis.tabs.splice(index, 0, item);\n\t\t\t\t\n\t\t\t\t// if a step is added before the current one, go to it\n\t\t\t\tif (index < this.activeTabIndex + 1) {\n\t\t\t\t\tthis.maxStep = index;\n\t\t\t\t\tthis.changeTab(this.activeTabIndex + 1, index);\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoveTab (item) {\n\t\t\t\tconst tabs = this.tabs;\n\t\t\t\tconst index = tabs.indexOf(item);\n\t\t\t\t\n\t\t\t\tif (index > -1) {\n\t\t\t\t\t\n\t\t\t\t\t// Go one step back if the current step is removed\n\t\t\t\t\tif (index === this.activeTabIndex) {\n\t\t\t\t\t\tthis.maxStep = this.activeTabIndex - 1;\n\t\t\t\t\t\tthis.changeTab(this.activeTabIndex, this.activeTabIndex - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index < this.activeTabIndex) {\n\t\t\t\t\t\tthis.maxStep = this.activeTabIndex - 1;\n\t\t\t\t\t\tthis.activeTabIndex = this.activeTabIndex - 1;\n\t\t\t\t\t\tthis.emitTabChange(this.activeTabIndex + 1, this.activeTabIndex);\n\t\t\t\t\t}\n\n\t\t\t\t\ttabs.splice(index, 1);\n\t\t\t\t}\n\t\t\t},\n\t\t\treset () {\n\t\t\t\tthis.maxStep = 0;\n\n\t\t\t\tthis.tabs.forEach((tab) => {\n\t\t\t\t\ttab.checked = false;\n\t\t\t\t});\n\n\t\t\t\tthis.navigateToTab(0);\n\t\t\t},\n\t\t\tactivateAll () {\n\t\t\t\tthis.maxStep = this.tabs.length - 1;\n\t\t\t\t\n\t\t\t\tthis.tabs.forEach((tab) => {\n\t\t\t\t\ttab.checked = true;\n\t\t\t\t});\n\t\t\t},\n\t\t\tnavigateToTab (index) {\n\t\t\t\tlet validate = index > this.activeTabIndex;\n\n\t\t\t\tif (index <= this.maxStep) {\n\t\t\t\t\tlet callback = () => {\n\t\t\t\t\t\tif (validate && index - this.activeTabIndex > 1) {\n\t\t\t\t\t\t\t// validate all steps recursively until destination index\n\t\t\t\t\t\t\tthis.changeTab(this.activeTabIndex, this.activeTabIndex + 1);\n\t\t\t\t\t\t\tthis.beforeTabChange(this.activeTabIndex, callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.changeTab(this.activeTabIndex, index);\n\t\t\t\t\t\t\tthis.afterTabChange(this.activeTabIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validate) {\n\t\t\t\t\t\tthis.beforeTabChange(this.activeTabIndex, callback);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setValidationError(null);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn index <= this.maxStep;\n\t\t\t},\n\t\t\tnextTab () {\n\t\t\t\tlet callback = () => {\n\t\t\t\t\tif (this.activeTabIndex < this.tabCount - 1) {\n\t\t\t\t\t\tthis.changeTab(this.activeTabIndex, this.activeTabIndex + 1);\n\t\t\t\t\t\tthis.afterTabChange(this.activeTabIndex);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.$emit('on-complete');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.beforeTabChange(this.activeTabIndex, callback);\n\t\t\t},\n\t\t\tprevTab () {\n\t\t\t\tlet callback = () => {\n\t\t\t\t\tif (this.activeTabIndex > 0) {\n\t\t\t\t\t\tthis.setValidationError(null);\n\t\t\t\t\t\tthis.changeTab(this.activeTabIndex, this.activeTabIndex - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.validateOnBack) {\n\t\t\t\t\tthis.beforeTabChange(this.activeTabIndex, callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusNextTab () {\n\t\t\t\tlet tabIndex = getFocusedTabIndex(this.tabs);\n\t\t\t\t\n\t\t\t\tif (tabIndex !== -1 && tabIndex < this.tabs.length - 1) {\n\t\t\t\t\tlet tabToFocus = this.tabs[tabIndex + 1];\n\t\t\t\t\t\n\t\t\t\t\tif (tabToFocus.checked) {\n\t\t\t\t\t\tfindElementAndFocus(tabToFocus.tabId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusPrevTab () {\n\t\t\t\tlet tabIndex = getFocusedTabIndex(this.tabs);\n\t\t\t\t\n\t\t\t\tif (tabIndex !== -1 && tabIndex > 0) {\n\t\t\t\t\tlet toFocusId = this.tabs[tabIndex - 1].tabId;\n\t\t\t\t\tfindElementAndFocus(toFocusId);\n\t\t\t\t}\n\t\t\t},\n\t\t\tsetLoading (value) {\n\t\t\t\tthis.loading = value;\n\t\t\t\tthis.$emit('on-loading', value);\n\t\t\t},\n\t\t\tsetValidationError (error) {\n\t\t\t\tthis.tabs[this.activeTabIndex].validationError = error;\n\t\t\t\tthis.$emit('on-error', error);\n\t\t\t},\n\t\t\tvalidateBeforeChange (promiseFn, callback) {\n\t\t\t\tthis.setValidationError(null);\n\n\t\t\t\t// we have a promise\n\t\t\t\tif (isPromise(promiseFn)) {\n\t\t\t\t\tthis.setLoading(true);\n\t\t\t\t\t\n\t\t\t\t\tpromiseFn.then((res) => {\n\t\t\t\t\t\tthis.setLoading(false);\n\t\t\t\t\t\tlet validationResult = res === true;\n\t\t\t\t\t\tthis.executeBeforeChange(validationResult, callback);\n\t\t\t\t\t}).catch((error) => {\n\t\t\t\t\t\tthis.setLoading(false);\n\t\t\t\t\t\tthis.setValidationError(error);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tlet validationResult = promiseFn === true;\n\t\t\t\t\tthis.executeBeforeChange(validationResult, callback);\n\t\t\t\t}\n\t\t\t},\n\t\t\texecuteBeforeChange (validationResult, callback) {\n\t\t\t\tthis.$emit('on-validate', validationResult, this.activeTabIndex);\n\t\t\t\t\n\t\t\t\tif (validationResult) {\n\t\t\t\t\tcallback();\n\t\t\t\t} else {\n\t\t\t\t\tthis.tabs[this.activeTabIndex].validationError = 'error';\n\t\t\t\t}\n\t\t\t},\n\t\t\tbeforeTabChange (index, callback) {\n\t\t\t\tif (this.loading) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet oldTab = this.tabs[index];\n\n\t\t\t\tif (oldTab && oldTab.beforeChange !== undefined) {\n\t\t\t\t\tlet tabChangeRes = oldTab.beforeChange();\n\t\t\t\t\tthis.validateBeforeChange(tabChangeRes, callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t},\n\t\t\tafterTabChange (index) {\n\t\t\t\tif (this.loading) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet newTab = this.tabs[index];\n\t\t\t\t\n\t\t\t\tif (newTab && newTab.afterChange !== undefined) {\n\t\t\t\t\tnewTab.afterChange();\n\t\t\t\t}\n\t\t\t},\n\t\t\tchangeTab (oldIndex, newIndex, emitChangeEvent = true) {\n\t\t\t\tlet oldTab = this.tabs[oldIndex];\n\t\t\t\tlet newTab = this.tabs[newIndex];\n\n\t\t\t\tif (oldTab) {\n\t\t\t\t\toldTab.active = false;\n\t\t\t\t}\n\n\t\t\t\tif (newTab) {\n\t\t\t\t\tnewTab.active = true;\n\t\t\t\t}\n\n\t\t\t\tif (emitChangeEvent && this.activeTabIndex !== newIndex) {\n\t\t\t\t\tthis.emitTabChange(oldIndex, newIndex);\n\t\t\t\t}\n\n\t\t\t\tthis.activeTabIndex = newIndex;\n\t\t\t\tthis.activateTabAndCheckStep(this.activeTabIndex);\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\ttryChangeRoute (tab) {\n\t\t\t\tif (this.$router && tab.route) {\n\t\t\t\t\tthis.$router.push(tab.route);\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckRouteChange (route) {\n\t\t\t\tlet matchingTabIndex = -1;\n\n\t\t\t\tlet matchingTab = this.tabs.find((tab, index) => {\n\t\t\t\t\tlet match = tab.route === route;\n\t\t\t\t\t\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tmatchingTabIndex = index;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t});\n\n\t\t\t\tif (matchingTab && !matchingTab.active) {\n\t\t\t\t\tconst shouldValidate = matchingTabIndex > this.activeTabIndex;\n\t\t\t\t\tthis.navigateToTab(matchingTabIndex, shouldValidate);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeactivateTabs () {\n\t\t\t\tthis.tabs.forEach(tab => {\n\t\t\t\t\ttab.active = false;\n\t\t\t\t});\n\t\t\t},\n\t\t\tactivateTab (index) {\n\t\t\t\tthis.deactivateTabs();\n\n\t\t\t\tlet tab = this.tabs[index];\n\n\t\t\t\tif (tab) {\n\t\t\t\t\ttab.active = true;\n\t\t\t\t\ttab.checked = true;\n\t\t\t\t\tthis.tryChangeRoute(tab);\n\t\t\t\t}\n\t\t\t},\n\t\t\tactivateTabAndCheckStep (index) {\n\t\t\t\tthis.activateTab(index);\n\n\t\t\t\tif (index > this.maxStep) {\n\t\t\t\t\tthis.maxStep = index;\n\t\t\t\t}\n\n\t\t\t\tthis.activeTabIndex = index;\n\t\t\t},\n\t\t\tinitializeTabs () {\n\t\t\t\tif (this.tabs.length > 0 && this.startIndex === 0) {\n\t\t\t\t\tthis.activateTab(this.activeTabIndex);\n\t\t\t\t}\n\n\t\t\t\tif (this.startIndex < this.tabs.length) {\n\t\t\t\t\tthis.activateTabAndCheckStep(this.startIndex);\n\t\t\t\t} else {\n\t\t\t\t\twindow.console.warn(`Prop startIndex set to ${this.startIndex} is greater than the number of tabs - ${this.tabs.length}. Make sure that the starting index is less than the number of tabs registered`);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmounted () {\n\t\t\tthis.initializeTabs();\n\t\t},\n\t\twatch: {\n\t\t\t'$route.path' (newRoute) {\n\t\t\t\tthis.checkRouteChange(newRoute);\n\t\t\t}\n\t\t}\n\t};\n</script>\n\n<style scoped>\n  .vue-wizard {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n"]}]}